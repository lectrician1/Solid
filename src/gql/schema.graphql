schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [String!]

  """does the array contain the given value"""
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _is_null: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "countries"
"""
type countries {
  id: Int!
  name: String!
}

"""
aggregated selection of "countries"
"""
type countries_aggregate {
  aggregate: countries_aggregate_fields
  nodes: [countries!]!
}

"""
aggregate fields of "countries"
"""
type countries_aggregate_fields {
  avg: countries_avg_fields
  count(columns: [countries_select_column!], distinct: Boolean): Int!
  max: countries_max_fields
  min: countries_min_fields
  stddev: countries_stddev_fields
  stddev_pop: countries_stddev_pop_fields
  stddev_samp: countries_stddev_samp_fields
  sum: countries_sum_fields
  var_pop: countries_var_pop_fields
  var_samp: countries_var_samp_fields
  variance: countries_variance_fields
}

"""aggregate avg on columns"""
type countries_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "countries". All fields are combined with a logical 'AND'.
"""
input countries_bool_exp {
  _and: [countries_bool_exp!]
  _not: countries_bool_exp
  _or: [countries_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "countries"
"""
enum countries_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  countries_pkey
}

"""
input type for incrementing numeric columns in table "countries"
"""
input countries_inc_input {
  id: Int
}

"""
input type for inserting data into table "countries"
"""
input countries_insert_input {
  id: Int
  name: String
}

"""aggregate max on columns"""
type countries_max_fields {
  id: Int
  name: String
}

"""aggregate min on columns"""
type countries_min_fields {
  id: Int
  name: String
}

"""
response of any mutation on the table "countries"
"""
type countries_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [countries!]!
}

"""
on_conflict condition type for table "countries"
"""
input countries_on_conflict {
  constraint: countries_constraint!
  update_columns: [countries_update_column!]! = []
  where: countries_bool_exp
}

"""Ordering options when selecting data from "countries"."""
input countries_order_by {
  id: order_by
  name: order_by
}

"""primary key columns input for table: countries"""
input countries_pk_columns_input {
  id: Int!
}

"""
select columns of table "countries"
"""
enum countries_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "countries"
"""
input countries_set_input {
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type countries_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type countries_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type countries_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "countries"
"""
input countries_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: countries_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input countries_stream_cursor_value_input {
  id: Int
  name: String
}

"""aggregate sum on columns"""
type countries_sum_fields {
  id: Int
}

"""
update columns of table "countries"
"""
enum countries_update_column {
  """column name"""
  id

  """column name"""
  name
}

input countries_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: countries_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: countries_set_input

  """filter the rows which have to be updated"""
  where: countries_bool_exp!
}

"""aggregate var_pop on columns"""
type countries_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type countries_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type countries_variance_fields {
  id: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "drone_telemetry"
"""
type drone_telemetry {
  altitude: float8
  battery: smallint

  """An object relationship"""
  drone: drones!
  drone_id: bigint!
  flight_id: bigint
  has_package: Boolean
  heading: float8
  id: bigint!
  latitude: float8
  longitude: float8
  stage_of_flight: String
  timestamp: bigint
  velocity: float8
}

"""
aggregated selection of "drone_telemetry"
"""
type drone_telemetry_aggregate {
  aggregate: drone_telemetry_aggregate_fields
  nodes: [drone_telemetry!]!
}

"""
aggregate fields of "drone_telemetry"
"""
type drone_telemetry_aggregate_fields {
  avg: drone_telemetry_avg_fields
  count(columns: [drone_telemetry_select_column!], distinct: Boolean): Int!
  max: drone_telemetry_max_fields
  min: drone_telemetry_min_fields
  stddev: drone_telemetry_stddev_fields
  stddev_pop: drone_telemetry_stddev_pop_fields
  stddev_samp: drone_telemetry_stddev_samp_fields
  sum: drone_telemetry_sum_fields
  var_pop: drone_telemetry_var_pop_fields
  var_samp: drone_telemetry_var_samp_fields
  variance: drone_telemetry_variance_fields
}

"""aggregate avg on columns"""
type drone_telemetry_avg_fields {
  altitude: Float
  battery: Float
  drone_id: Float
  flight_id: Float
  heading: Float
  id: Float
  latitude: Float
  longitude: Float
  timestamp: Float
  velocity: Float
}

"""
Boolean expression to filter rows from the table "drone_telemetry". All fields are combined with a logical 'AND'.
"""
input drone_telemetry_bool_exp {
  _and: [drone_telemetry_bool_exp!]
  _not: drone_telemetry_bool_exp
  _or: [drone_telemetry_bool_exp!]
  altitude: float8_comparison_exp
  battery: smallint_comparison_exp
  drone: drones_bool_exp
  drone_id: bigint_comparison_exp
  flight_id: bigint_comparison_exp
  has_package: Boolean_comparison_exp
  heading: float8_comparison_exp
  id: bigint_comparison_exp
  latitude: float8_comparison_exp
  longitude: float8_comparison_exp
  stage_of_flight: String_comparison_exp
  timestamp: bigint_comparison_exp
  velocity: float8_comparison_exp
}

"""
unique or primary key constraints on table "drone_telemetry"
"""
enum drone_telemetry_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  drone_telemetry_pkey
}

"""
input type for incrementing numeric columns in table "drone_telemetry"
"""
input drone_telemetry_inc_input {
  altitude: float8
  battery: smallint
  drone_id: bigint
  flight_id: bigint
  heading: float8
  id: bigint
  latitude: float8
  longitude: float8
  timestamp: bigint
  velocity: float8
}

"""
input type for inserting data into table "drone_telemetry"
"""
input drone_telemetry_insert_input {
  altitude: float8
  battery: smallint
  drone: drones_obj_rel_insert_input
  drone_id: bigint
  flight_id: bigint
  has_package: Boolean
  heading: float8
  id: bigint
  latitude: float8
  longitude: float8
  stage_of_flight: String
  timestamp: bigint
  velocity: float8
}

"""aggregate max on columns"""
type drone_telemetry_max_fields {
  altitude: float8
  battery: smallint
  drone_id: bigint
  flight_id: bigint
  heading: float8
  id: bigint
  latitude: float8
  longitude: float8
  stage_of_flight: String
  timestamp: bigint
  velocity: float8
}

"""aggregate min on columns"""
type drone_telemetry_min_fields {
  altitude: float8
  battery: smallint
  drone_id: bigint
  flight_id: bigint
  heading: float8
  id: bigint
  latitude: float8
  longitude: float8
  stage_of_flight: String
  timestamp: bigint
  velocity: float8
}

"""
response of any mutation on the table "drone_telemetry"
"""
type drone_telemetry_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [drone_telemetry!]!
}

"""
on_conflict condition type for table "drone_telemetry"
"""
input drone_telemetry_on_conflict {
  constraint: drone_telemetry_constraint!
  update_columns: [drone_telemetry_update_column!]! = []
  where: drone_telemetry_bool_exp
}

"""Ordering options when selecting data from "drone_telemetry"."""
input drone_telemetry_order_by {
  altitude: order_by
  battery: order_by
  drone: drones_order_by
  drone_id: order_by
  flight_id: order_by
  has_package: order_by
  heading: order_by
  id: order_by
  latitude: order_by
  longitude: order_by
  stage_of_flight: order_by
  timestamp: order_by
  velocity: order_by
}

"""primary key columns input for table: drone_telemetry"""
input drone_telemetry_pk_columns_input {
  id: bigint!
}

"""
select columns of table "drone_telemetry"
"""
enum drone_telemetry_select_column {
  """column name"""
  altitude

  """column name"""
  battery

  """column name"""
  drone_id

  """column name"""
  flight_id

  """column name"""
  has_package

  """column name"""
  heading

  """column name"""
  id

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  stage_of_flight

  """column name"""
  timestamp

  """column name"""
  velocity
}

"""
input type for updating data in table "drone_telemetry"
"""
input drone_telemetry_set_input {
  altitude: float8
  battery: smallint
  drone_id: bigint
  flight_id: bigint
  has_package: Boolean
  heading: float8
  id: bigint
  latitude: float8
  longitude: float8
  stage_of_flight: String
  timestamp: bigint
  velocity: float8
}

"""aggregate stddev on columns"""
type drone_telemetry_stddev_fields {
  altitude: Float
  battery: Float
  drone_id: Float
  flight_id: Float
  heading: Float
  id: Float
  latitude: Float
  longitude: Float
  timestamp: Float
  velocity: Float
}

"""aggregate stddev_pop on columns"""
type drone_telemetry_stddev_pop_fields {
  altitude: Float
  battery: Float
  drone_id: Float
  flight_id: Float
  heading: Float
  id: Float
  latitude: Float
  longitude: Float
  timestamp: Float
  velocity: Float
}

"""aggregate stddev_samp on columns"""
type drone_telemetry_stddev_samp_fields {
  altitude: Float
  battery: Float
  drone_id: Float
  flight_id: Float
  heading: Float
  id: Float
  latitude: Float
  longitude: Float
  timestamp: Float
  velocity: Float
}

"""
Streaming cursor of the table "drone_telemetry"
"""
input drone_telemetry_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: drone_telemetry_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input drone_telemetry_stream_cursor_value_input {
  altitude: float8
  battery: smallint
  drone_id: bigint
  flight_id: bigint
  has_package: Boolean
  heading: float8
  id: bigint
  latitude: float8
  longitude: float8
  stage_of_flight: String
  timestamp: bigint
  velocity: float8
}

"""aggregate sum on columns"""
type drone_telemetry_sum_fields {
  altitude: float8
  battery: smallint
  drone_id: bigint
  flight_id: bigint
  heading: float8
  id: bigint
  latitude: float8
  longitude: float8
  timestamp: bigint
  velocity: float8
}

"""
update columns of table "drone_telemetry"
"""
enum drone_telemetry_update_column {
  """column name"""
  altitude

  """column name"""
  battery

  """column name"""
  drone_id

  """column name"""
  flight_id

  """column name"""
  has_package

  """column name"""
  heading

  """column name"""
  id

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  stage_of_flight

  """column name"""
  timestamp

  """column name"""
  velocity
}

input drone_telemetry_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: drone_telemetry_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: drone_telemetry_set_input

  """filter the rows which have to be updated"""
  where: drone_telemetry_bool_exp!
}

"""aggregate var_pop on columns"""
type drone_telemetry_var_pop_fields {
  altitude: Float
  battery: Float
  drone_id: Float
  flight_id: Float
  heading: Float
  id: Float
  latitude: Float
  longitude: Float
  timestamp: Float
  velocity: Float
}

"""aggregate var_samp on columns"""
type drone_telemetry_var_samp_fields {
  altitude: Float
  battery: Float
  drone_id: Float
  flight_id: Float
  heading: Float
  id: Float
  latitude: Float
  longitude: Float
  timestamp: Float
  velocity: Float
}

"""aggregate variance on columns"""
type drone_telemetry_variance_fields {
  altitude: Float
  battery: Float
  drone_id: Float
  flight_id: Float
  heading: Float
  id: Float
  latitude: Float
  longitude: Float
  timestamp: Float
  velocity: Float
}

"""
columns and relationships of "drones"
"""
type drones {
  completion_date: bigint
  drone_id: bigint!
  is_active: Boolean
  is_exists: Boolean
}

"""
aggregated selection of "drones"
"""
type drones_aggregate {
  aggregate: drones_aggregate_fields
  nodes: [drones!]!
}

"""
aggregate fields of "drones"
"""
type drones_aggregate_fields {
  avg: drones_avg_fields
  count(columns: [drones_select_column!], distinct: Boolean): Int!
  max: drones_max_fields
  min: drones_min_fields
  stddev: drones_stddev_fields
  stddev_pop: drones_stddev_pop_fields
  stddev_samp: drones_stddev_samp_fields
  sum: drones_sum_fields
  var_pop: drones_var_pop_fields
  var_samp: drones_var_samp_fields
  variance: drones_variance_fields
}

"""aggregate avg on columns"""
type drones_avg_fields {
  completion_date: Float
  drone_id: Float
}

"""
Boolean expression to filter rows from the table "drones". All fields are combined with a logical 'AND'.
"""
input drones_bool_exp {
  _and: [drones_bool_exp!]
  _not: drones_bool_exp
  _or: [drones_bool_exp!]
  completion_date: bigint_comparison_exp
  drone_id: bigint_comparison_exp
  is_active: Boolean_comparison_exp
  is_exists: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "drones"
"""
enum drones_constraint {
  """
  unique or primary key constraint on columns "drone_id"
  """
  drones_pkey
}

"""
input type for incrementing numeric columns in table "drones"
"""
input drones_inc_input {
  completion_date: bigint
  drone_id: bigint
}

"""
input type for inserting data into table "drones"
"""
input drones_insert_input {
  completion_date: bigint
  drone_id: bigint
  is_active: Boolean
  is_exists: Boolean
}

"""aggregate max on columns"""
type drones_max_fields {
  completion_date: bigint
  drone_id: bigint
}

"""aggregate min on columns"""
type drones_min_fields {
  completion_date: bigint
  drone_id: bigint
}

"""
response of any mutation on the table "drones"
"""
type drones_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [drones!]!
}

"""
input type for inserting object relation for remote table "drones"
"""
input drones_obj_rel_insert_input {
  data: drones_insert_input!

  """upsert condition"""
  on_conflict: drones_on_conflict
}

"""
on_conflict condition type for table "drones"
"""
input drones_on_conflict {
  constraint: drones_constraint!
  update_columns: [drones_update_column!]! = []
  where: drones_bool_exp
}

"""Ordering options when selecting data from "drones"."""
input drones_order_by {
  completion_date: order_by
  drone_id: order_by
  is_active: order_by
  is_exists: order_by
}

"""primary key columns input for table: drones"""
input drones_pk_columns_input {
  drone_id: bigint!
}

"""
select columns of table "drones"
"""
enum drones_select_column {
  """column name"""
  completion_date

  """column name"""
  drone_id

  """column name"""
  is_active

  """column name"""
  is_exists
}

"""
input type for updating data in table "drones"
"""
input drones_set_input {
  completion_date: bigint
  drone_id: bigint
  is_active: Boolean
  is_exists: Boolean
}

"""aggregate stddev on columns"""
type drones_stddev_fields {
  completion_date: Float
  drone_id: Float
}

"""aggregate stddev_pop on columns"""
type drones_stddev_pop_fields {
  completion_date: Float
  drone_id: Float
}

"""aggregate stddev_samp on columns"""
type drones_stddev_samp_fields {
  completion_date: Float
  drone_id: Float
}

"""
Streaming cursor of the table "drones"
"""
input drones_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: drones_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input drones_stream_cursor_value_input {
  completion_date: bigint
  drone_id: bigint
  is_active: Boolean
  is_exists: Boolean
}

"""aggregate sum on columns"""
type drones_sum_fields {
  completion_date: bigint
  drone_id: bigint
}

"""
update columns of table "drones"
"""
enum drones_update_column {
  """column name"""
  completion_date

  """column name"""
  drone_id

  """column name"""
  is_active

  """column name"""
  is_exists
}

input drones_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: drones_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: drones_set_input

  """filter the rows which have to be updated"""
  where: drones_bool_exp!
}

"""aggregate var_pop on columns"""
type drones_var_pop_fields {
  completion_date: Float
  drone_id: Float
}

"""aggregate var_samp on columns"""
type drones_var_samp_fields {
  completion_date: Float
  drone_id: Float
}

"""aggregate variance on columns"""
type drones_variance_fields {
  completion_date: Float
  drone_id: Float
}

"""
columns and relationships of "flights"
"""
type flights {
  drone_id: bigint
  end_lat: float8
  end_long: float8
  flight_id: bigint!
  order_id: bigint
  route: [String!]
  start_lat: float8
  start_long: float8
  status: String
}

"""
aggregated selection of "flights"
"""
type flights_aggregate {
  aggregate: flights_aggregate_fields
  nodes: [flights!]!
}

"""
aggregate fields of "flights"
"""
type flights_aggregate_fields {
  avg: flights_avg_fields
  count(columns: [flights_select_column!], distinct: Boolean): Int!
  max: flights_max_fields
  min: flights_min_fields
  stddev: flights_stddev_fields
  stddev_pop: flights_stddev_pop_fields
  stddev_samp: flights_stddev_samp_fields
  sum: flights_sum_fields
  var_pop: flights_var_pop_fields
  var_samp: flights_var_samp_fields
  variance: flights_variance_fields
}

"""aggregate avg on columns"""
type flights_avg_fields {
  drone_id: Float
  end_lat: Float
  end_long: Float
  flight_id: Float
  order_id: Float
  start_lat: Float
  start_long: Float
}

"""
Boolean expression to filter rows from the table "flights". All fields are combined with a logical 'AND'.
"""
input flights_bool_exp {
  _and: [flights_bool_exp!]
  _not: flights_bool_exp
  _or: [flights_bool_exp!]
  drone_id: bigint_comparison_exp
  end_lat: float8_comparison_exp
  end_long: float8_comparison_exp
  flight_id: bigint_comparison_exp
  order_id: bigint_comparison_exp
  route: String_array_comparison_exp
  start_lat: float8_comparison_exp
  start_long: float8_comparison_exp
  status: String_comparison_exp
}

"""
unique or primary key constraints on table "flights"
"""
enum flights_constraint {
  """
  unique or primary key constraint on columns "flight_id"
  """
  flights_pkey
}

"""
input type for incrementing numeric columns in table "flights"
"""
input flights_inc_input {
  drone_id: bigint
  end_lat: float8
  end_long: float8
  flight_id: bigint
  order_id: bigint
  start_lat: float8
  start_long: float8
}

"""
input type for inserting data into table "flights"
"""
input flights_insert_input {
  drone_id: bigint
  end_lat: float8
  end_long: float8
  flight_id: bigint
  order_id: bigint
  route: [String!]
  start_lat: float8
  start_long: float8
  status: String
}

"""aggregate max on columns"""
type flights_max_fields {
  drone_id: bigint
  end_lat: float8
  end_long: float8
  flight_id: bigint
  order_id: bigint
  route: [String!]
  start_lat: float8
  start_long: float8
  status: String
}

"""aggregate min on columns"""
type flights_min_fields {
  drone_id: bigint
  end_lat: float8
  end_long: float8
  flight_id: bigint
  order_id: bigint
  route: [String!]
  start_lat: float8
  start_long: float8
  status: String
}

"""
response of any mutation on the table "flights"
"""
type flights_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [flights!]!
}

"""
on_conflict condition type for table "flights"
"""
input flights_on_conflict {
  constraint: flights_constraint!
  update_columns: [flights_update_column!]! = []
  where: flights_bool_exp
}

"""Ordering options when selecting data from "flights"."""
input flights_order_by {
  drone_id: order_by
  end_lat: order_by
  end_long: order_by
  flight_id: order_by
  order_id: order_by
  route: order_by
  start_lat: order_by
  start_long: order_by
  status: order_by
}

"""primary key columns input for table: flights"""
input flights_pk_columns_input {
  flight_id: bigint!
}

"""
select columns of table "flights"
"""
enum flights_select_column {
  """column name"""
  drone_id

  """column name"""
  end_lat

  """column name"""
  end_long

  """column name"""
  flight_id

  """column name"""
  order_id

  """column name"""
  route

  """column name"""
  start_lat

  """column name"""
  start_long

  """column name"""
  status
}

"""
input type for updating data in table "flights"
"""
input flights_set_input {
  drone_id: bigint
  end_lat: float8
  end_long: float8
  flight_id: bigint
  order_id: bigint
  route: [String!]
  start_lat: float8
  start_long: float8
  status: String
}

"""aggregate stddev on columns"""
type flights_stddev_fields {
  drone_id: Float
  end_lat: Float
  end_long: Float
  flight_id: Float
  order_id: Float
  start_lat: Float
  start_long: Float
}

"""aggregate stddev_pop on columns"""
type flights_stddev_pop_fields {
  drone_id: Float
  end_lat: Float
  end_long: Float
  flight_id: Float
  order_id: Float
  start_lat: Float
  start_long: Float
}

"""aggregate stddev_samp on columns"""
type flights_stddev_samp_fields {
  drone_id: Float
  end_lat: Float
  end_long: Float
  flight_id: Float
  order_id: Float
  start_lat: Float
  start_long: Float
}

"""
Streaming cursor of the table "flights"
"""
input flights_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: flights_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input flights_stream_cursor_value_input {
  drone_id: bigint
  end_lat: float8
  end_long: float8
  flight_id: bigint
  order_id: bigint
  route: [String!]
  start_lat: float8
  start_long: float8
  status: String
}

"""aggregate sum on columns"""
type flights_sum_fields {
  drone_id: bigint
  end_lat: float8
  end_long: float8
  flight_id: bigint
  order_id: bigint
  start_lat: float8
  start_long: float8
}

"""
update columns of table "flights"
"""
enum flights_update_column {
  """column name"""
  drone_id

  """column name"""
  end_lat

  """column name"""
  end_long

  """column name"""
  flight_id

  """column name"""
  order_id

  """column name"""
  route

  """column name"""
  start_lat

  """column name"""
  start_long

  """column name"""
  status
}

input flights_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: flights_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: flights_set_input

  """filter the rows which have to be updated"""
  where: flights_bool_exp!
}

"""aggregate var_pop on columns"""
type flights_var_pop_fields {
  drone_id: Float
  end_lat: Float
  end_long: Float
  flight_id: Float
  order_id: Float
  start_lat: Float
  start_long: Float
}

"""aggregate var_samp on columns"""
type flights_var_samp_fields {
  drone_id: Float
  end_lat: Float
  end_long: Float
  flight_id: Float
  order_id: Float
  start_lat: Float
  start_long: Float
}

"""aggregate variance on columns"""
type flights_variance_fields {
  drone_id: Float
  end_lat: Float
  end_long: Float
  flight_id: Float
  order_id: Float
  start_lat: Float
  start_long: Float
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "countries"
  """
  delete_countries(
    """filter the rows which have to be deleted"""
    where: countries_bool_exp!
  ): countries_mutation_response

  """
  delete single row from the table: "countries"
  """
  delete_countries_by_pk(id: Int!): countries

  """
  delete data from the table: "drone_telemetry"
  """
  delete_drone_telemetry(
    """filter the rows which have to be deleted"""
    where: drone_telemetry_bool_exp!
  ): drone_telemetry_mutation_response

  """
  delete single row from the table: "drone_telemetry"
  """
  delete_drone_telemetry_by_pk(id: bigint!): drone_telemetry

  """
  delete data from the table: "drones"
  """
  delete_drones(
    """filter the rows which have to be deleted"""
    where: drones_bool_exp!
  ): drones_mutation_response

  """
  delete single row from the table: "drones"
  """
  delete_drones_by_pk(drone_id: bigint!): drones

  """
  delete data from the table: "flights"
  """
  delete_flights(
    """filter the rows which have to be deleted"""
    where: flights_bool_exp!
  ): flights_mutation_response

  """
  delete single row from the table: "flights"
  """
  delete_flights_by_pk(flight_id: bigint!): flights

  """
  delete data from the table: "orders"
  """
  delete_orders(
    """filter the rows which have to be deleted"""
    where: orders_bool_exp!
  ): orders_mutation_response

  """
  delete single row from the table: "orders"
  """
  delete_orders_by_pk(order_id: bigint!): orders

  """
  insert data into the table: "countries"
  """
  insert_countries(
    """the rows to be inserted"""
    objects: [countries_insert_input!]!

    """upsert condition"""
    on_conflict: countries_on_conflict
  ): countries_mutation_response

  """
  insert a single row into the table: "countries"
  """
  insert_countries_one(
    """the row to be inserted"""
    object: countries_insert_input!

    """upsert condition"""
    on_conflict: countries_on_conflict
  ): countries

  """
  insert data into the table: "drone_telemetry"
  """
  insert_drone_telemetry(
    """the rows to be inserted"""
    objects: [drone_telemetry_insert_input!]!

    """upsert condition"""
    on_conflict: drone_telemetry_on_conflict
  ): drone_telemetry_mutation_response

  """
  insert a single row into the table: "drone_telemetry"
  """
  insert_drone_telemetry_one(
    """the row to be inserted"""
    object: drone_telemetry_insert_input!

    """upsert condition"""
    on_conflict: drone_telemetry_on_conflict
  ): drone_telemetry

  """
  insert data into the table: "drones"
  """
  insert_drones(
    """the rows to be inserted"""
    objects: [drones_insert_input!]!

    """upsert condition"""
    on_conflict: drones_on_conflict
  ): drones_mutation_response

  """
  insert a single row into the table: "drones"
  """
  insert_drones_one(
    """the row to be inserted"""
    object: drones_insert_input!

    """upsert condition"""
    on_conflict: drones_on_conflict
  ): drones

  """
  insert data into the table: "flights"
  """
  insert_flights(
    """the rows to be inserted"""
    objects: [flights_insert_input!]!

    """upsert condition"""
    on_conflict: flights_on_conflict
  ): flights_mutation_response

  """
  insert a single row into the table: "flights"
  """
  insert_flights_one(
    """the row to be inserted"""
    object: flights_insert_input!

    """upsert condition"""
    on_conflict: flights_on_conflict
  ): flights

  """
  insert data into the table: "orders"
  """
  insert_orders(
    """the rows to be inserted"""
    objects: [orders_insert_input!]!

    """upsert condition"""
    on_conflict: orders_on_conflict
  ): orders_mutation_response

  """
  insert a single row into the table: "orders"
  """
  insert_orders_one(
    """the row to be inserted"""
    object: orders_insert_input!

    """upsert condition"""
    on_conflict: orders_on_conflict
  ): orders

  """
  update data of the table: "countries"
  """
  update_countries(
    """increments the numeric columns with given value of the filtered values"""
    _inc: countries_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: countries_set_input

    """filter the rows which have to be updated"""
    where: countries_bool_exp!
  ): countries_mutation_response

  """
  update single row of the table: "countries"
  """
  update_countries_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: countries_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: countries_set_input
    pk_columns: countries_pk_columns_input!
  ): countries

  """
  update multiples rows of table: "countries"
  """
  update_countries_many(
    """updates to execute, in order"""
    updates: [countries_updates!]!
  ): [countries_mutation_response]

  """
  update data of the table: "drone_telemetry"
  """
  update_drone_telemetry(
    """increments the numeric columns with given value of the filtered values"""
    _inc: drone_telemetry_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: drone_telemetry_set_input

    """filter the rows which have to be updated"""
    where: drone_telemetry_bool_exp!
  ): drone_telemetry_mutation_response

  """
  update single row of the table: "drone_telemetry"
  """
  update_drone_telemetry_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: drone_telemetry_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: drone_telemetry_set_input
    pk_columns: drone_telemetry_pk_columns_input!
  ): drone_telemetry

  """
  update multiples rows of table: "drone_telemetry"
  """
  update_drone_telemetry_many(
    """updates to execute, in order"""
    updates: [drone_telemetry_updates!]!
  ): [drone_telemetry_mutation_response]

  """
  update data of the table: "drones"
  """
  update_drones(
    """increments the numeric columns with given value of the filtered values"""
    _inc: drones_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: drones_set_input

    """filter the rows which have to be updated"""
    where: drones_bool_exp!
  ): drones_mutation_response

  """
  update single row of the table: "drones"
  """
  update_drones_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: drones_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: drones_set_input
    pk_columns: drones_pk_columns_input!
  ): drones

  """
  update multiples rows of table: "drones"
  """
  update_drones_many(
    """updates to execute, in order"""
    updates: [drones_updates!]!
  ): [drones_mutation_response]

  """
  update data of the table: "flights"
  """
  update_flights(
    """increments the numeric columns with given value of the filtered values"""
    _inc: flights_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: flights_set_input

    """filter the rows which have to be updated"""
    where: flights_bool_exp!
  ): flights_mutation_response

  """
  update single row of the table: "flights"
  """
  update_flights_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: flights_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: flights_set_input
    pk_columns: flights_pk_columns_input!
  ): flights

  """
  update multiples rows of table: "flights"
  """
  update_flights_many(
    """updates to execute, in order"""
    updates: [flights_updates!]!
  ): [flights_mutation_response]

  """
  update data of the table: "orders"
  """
  update_orders(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input

    """filter the rows which have to be updated"""
    where: orders_bool_exp!
  ): orders_mutation_response

  """
  update single row of the table: "orders"
  """
  update_orders_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input
    pk_columns: orders_pk_columns_input!
  ): orders

  """
  update multiples rows of table: "orders"
  """
  update_orders_many(
    """updates to execute, in order"""
    updates: [orders_updates!]!
  ): [orders_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "orders"
"""
type orders {
  completed: Boolean
  completed_at: bigint
  delivered_at: bigint
  dest_lat: float8
  dest_long: float8
  food_items: [String!]
  order_id: bigint!
  pickup_lat: float8
  pickup_long: float8
  placed_at: bigint
  price: float8
  user_id: bigint
  vendor_id: bigint!
}

"""
aggregated selection of "orders"
"""
type orders_aggregate {
  aggregate: orders_aggregate_fields
  nodes: [orders!]!
}

"""
aggregate fields of "orders"
"""
type orders_aggregate_fields {
  avg: orders_avg_fields
  count(columns: [orders_select_column!], distinct: Boolean): Int!
  max: orders_max_fields
  min: orders_min_fields
  stddev: orders_stddev_fields
  stddev_pop: orders_stddev_pop_fields
  stddev_samp: orders_stddev_samp_fields
  sum: orders_sum_fields
  var_pop: orders_var_pop_fields
  var_samp: orders_var_samp_fields
  variance: orders_variance_fields
}

"""aggregate avg on columns"""
type orders_avg_fields {
  completed_at: Float
  delivered_at: Float
  dest_lat: Float
  dest_long: Float
  order_id: Float
  pickup_lat: Float
  pickup_long: Float
  placed_at: Float
  price: Float
  user_id: Float
  vendor_id: Float
}

"""
Boolean expression to filter rows from the table "orders". All fields are combined with a logical 'AND'.
"""
input orders_bool_exp {
  _and: [orders_bool_exp!]
  _not: orders_bool_exp
  _or: [orders_bool_exp!]
  completed: Boolean_comparison_exp
  completed_at: bigint_comparison_exp
  delivered_at: bigint_comparison_exp
  dest_lat: float8_comparison_exp
  dest_long: float8_comparison_exp
  food_items: String_array_comparison_exp
  order_id: bigint_comparison_exp
  pickup_lat: float8_comparison_exp
  pickup_long: float8_comparison_exp
  placed_at: bigint_comparison_exp
  price: float8_comparison_exp
  user_id: bigint_comparison_exp
  vendor_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "orders"
"""
enum orders_constraint {
  """
  unique or primary key constraint on columns "order_id"
  """
  orders_pkey
}

"""
input type for incrementing numeric columns in table "orders"
"""
input orders_inc_input {
  completed_at: bigint
  delivered_at: bigint
  dest_lat: float8
  dest_long: float8
  order_id: bigint
  pickup_lat: float8
  pickup_long: float8
  placed_at: bigint
  price: float8
  user_id: bigint
  vendor_id: bigint
}

"""
input type for inserting data into table "orders"
"""
input orders_insert_input {
  completed: Boolean
  completed_at: bigint
  delivered_at: bigint
  dest_lat: float8
  dest_long: float8
  food_items: [String!]
  order_id: bigint
  pickup_lat: float8
  pickup_long: float8
  placed_at: bigint
  price: float8
  user_id: bigint
  vendor_id: bigint
}

"""aggregate max on columns"""
type orders_max_fields {
  completed_at: bigint
  delivered_at: bigint
  dest_lat: float8
  dest_long: float8
  food_items: [String!]
  order_id: bigint
  pickup_lat: float8
  pickup_long: float8
  placed_at: bigint
  price: float8
  user_id: bigint
  vendor_id: bigint
}

"""aggregate min on columns"""
type orders_min_fields {
  completed_at: bigint
  delivered_at: bigint
  dest_lat: float8
  dest_long: float8
  food_items: [String!]
  order_id: bigint
  pickup_lat: float8
  pickup_long: float8
  placed_at: bigint
  price: float8
  user_id: bigint
  vendor_id: bigint
}

"""
response of any mutation on the table "orders"
"""
type orders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [orders!]!
}

"""
on_conflict condition type for table "orders"
"""
input orders_on_conflict {
  constraint: orders_constraint!
  update_columns: [orders_update_column!]! = []
  where: orders_bool_exp
}

"""Ordering options when selecting data from "orders"."""
input orders_order_by {
  completed: order_by
  completed_at: order_by
  delivered_at: order_by
  dest_lat: order_by
  dest_long: order_by
  food_items: order_by
  order_id: order_by
  pickup_lat: order_by
  pickup_long: order_by
  placed_at: order_by
  price: order_by
  user_id: order_by
  vendor_id: order_by
}

"""primary key columns input for table: orders"""
input orders_pk_columns_input {
  order_id: bigint!
}

"""
select columns of table "orders"
"""
enum orders_select_column {
  """column name"""
  completed

  """column name"""
  completed_at

  """column name"""
  delivered_at

  """column name"""
  dest_lat

  """column name"""
  dest_long

  """column name"""
  food_items

  """column name"""
  order_id

  """column name"""
  pickup_lat

  """column name"""
  pickup_long

  """column name"""
  placed_at

  """column name"""
  price

  """column name"""
  user_id

  """column name"""
  vendor_id
}

"""
input type for updating data in table "orders"
"""
input orders_set_input {
  completed: Boolean
  completed_at: bigint
  delivered_at: bigint
  dest_lat: float8
  dest_long: float8
  food_items: [String!]
  order_id: bigint
  pickup_lat: float8
  pickup_long: float8
  placed_at: bigint
  price: float8
  user_id: bigint
  vendor_id: bigint
}

"""aggregate stddev on columns"""
type orders_stddev_fields {
  completed_at: Float
  delivered_at: Float
  dest_lat: Float
  dest_long: Float
  order_id: Float
  pickup_lat: Float
  pickup_long: Float
  placed_at: Float
  price: Float
  user_id: Float
  vendor_id: Float
}

"""aggregate stddev_pop on columns"""
type orders_stddev_pop_fields {
  completed_at: Float
  delivered_at: Float
  dest_lat: Float
  dest_long: Float
  order_id: Float
  pickup_lat: Float
  pickup_long: Float
  placed_at: Float
  price: Float
  user_id: Float
  vendor_id: Float
}

"""aggregate stddev_samp on columns"""
type orders_stddev_samp_fields {
  completed_at: Float
  delivered_at: Float
  dest_lat: Float
  dest_long: Float
  order_id: Float
  pickup_lat: Float
  pickup_long: Float
  placed_at: Float
  price: Float
  user_id: Float
  vendor_id: Float
}

"""
Streaming cursor of the table "orders"
"""
input orders_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: orders_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input orders_stream_cursor_value_input {
  completed: Boolean
  completed_at: bigint
  delivered_at: bigint
  dest_lat: float8
  dest_long: float8
  food_items: [String!]
  order_id: bigint
  pickup_lat: float8
  pickup_long: float8
  placed_at: bigint
  price: float8
  user_id: bigint
  vendor_id: bigint
}

"""aggregate sum on columns"""
type orders_sum_fields {
  completed_at: bigint
  delivered_at: bigint
  dest_lat: float8
  dest_long: float8
  order_id: bigint
  pickup_lat: float8
  pickup_long: float8
  placed_at: bigint
  price: float8
  user_id: bigint
  vendor_id: bigint
}

"""
update columns of table "orders"
"""
enum orders_update_column {
  """column name"""
  completed

  """column name"""
  completed_at

  """column name"""
  delivered_at

  """column name"""
  dest_lat

  """column name"""
  dest_long

  """column name"""
  food_items

  """column name"""
  order_id

  """column name"""
  pickup_lat

  """column name"""
  pickup_long

  """column name"""
  placed_at

  """column name"""
  price

  """column name"""
  user_id

  """column name"""
  vendor_id
}

input orders_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: orders_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: orders_set_input

  """filter the rows which have to be updated"""
  where: orders_bool_exp!
}

"""aggregate var_pop on columns"""
type orders_var_pop_fields {
  completed_at: Float
  delivered_at: Float
  dest_lat: Float
  dest_long: Float
  order_id: Float
  pickup_lat: Float
  pickup_long: Float
  placed_at: Float
  price: Float
  user_id: Float
  vendor_id: Float
}

"""aggregate var_samp on columns"""
type orders_var_samp_fields {
  completed_at: Float
  delivered_at: Float
  dest_lat: Float
  dest_long: Float
  order_id: Float
  pickup_lat: Float
  pickup_long: Float
  placed_at: Float
  price: Float
  user_id: Float
  vendor_id: Float
}

"""aggregate variance on columns"""
type orders_variance_fields {
  completed_at: Float
  delivered_at: Float
  dest_lat: Float
  dest_long: Float
  order_id: Float
  pickup_lat: Float
  pickup_long: Float
  placed_at: Float
  price: Float
  user_id: Float
  vendor_id: Float
}

type query_root {
  """
  fetch data from the table: "countries"
  """
  countries(
    """distinct select on columns"""
    distinct_on: [countries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): [countries!]!

  """
  fetch aggregated fields from the table: "countries"
  """
  countries_aggregate(
    """distinct select on columns"""
    distinct_on: [countries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): countries_aggregate!

  """fetch data from the table: "countries" using primary key columns"""
  countries_by_pk(id: Int!): countries

  """
  fetch data from the table: "drone_telemetry"
  """
  drone_telemetry(
    """distinct select on columns"""
    distinct_on: [drone_telemetry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drone_telemetry_order_by!]

    """filter the rows returned"""
    where: drone_telemetry_bool_exp
  ): [drone_telemetry!]!

  """
  fetch aggregated fields from the table: "drone_telemetry"
  """
  drone_telemetry_aggregate(
    """distinct select on columns"""
    distinct_on: [drone_telemetry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drone_telemetry_order_by!]

    """filter the rows returned"""
    where: drone_telemetry_bool_exp
  ): drone_telemetry_aggregate!

  """fetch data from the table: "drone_telemetry" using primary key columns"""
  drone_telemetry_by_pk(id: bigint!): drone_telemetry

  """
  fetch data from the table: "drones"
  """
  drones(
    """distinct select on columns"""
    distinct_on: [drones_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drones_order_by!]

    """filter the rows returned"""
    where: drones_bool_exp
  ): [drones!]!

  """
  fetch aggregated fields from the table: "drones"
  """
  drones_aggregate(
    """distinct select on columns"""
    distinct_on: [drones_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drones_order_by!]

    """filter the rows returned"""
    where: drones_bool_exp
  ): drones_aggregate!

  """fetch data from the table: "drones" using primary key columns"""
  drones_by_pk(drone_id: bigint!): drones

  """
  fetch data from the table: "flights"
  """
  flights(
    """distinct select on columns"""
    distinct_on: [flights_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flights_order_by!]

    """filter the rows returned"""
    where: flights_bool_exp
  ): [flights!]!

  """
  fetch aggregated fields from the table: "flights"
  """
  flights_aggregate(
    """distinct select on columns"""
    distinct_on: [flights_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flights_order_by!]

    """filter the rows returned"""
    where: flights_bool_exp
  ): flights_aggregate!

  """fetch data from the table: "flights" using primary key columns"""
  flights_by_pk(flight_id: bigint!): flights

  """
  fetch data from the table: "orders"
  """
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """
  fetch aggregated fields from the table: "orders"
  """
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(order_id: bigint!): orders
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

type subscription_root {
  """
  fetch data from the table: "countries"
  """
  countries(
    """distinct select on columns"""
    distinct_on: [countries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): [countries!]!

  """
  fetch aggregated fields from the table: "countries"
  """
  countries_aggregate(
    """distinct select on columns"""
    distinct_on: [countries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): countries_aggregate!

  """fetch data from the table: "countries" using primary key columns"""
  countries_by_pk(id: Int!): countries

  """
  fetch data from the table in a streaming manner: "countries"
  """
  countries_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [countries_stream_cursor_input]!

    """filter the rows returned"""
    where: countries_bool_exp
  ): [countries!]!

  """
  fetch data from the table: "drone_telemetry"
  """
  drone_telemetry(
    """distinct select on columns"""
    distinct_on: [drone_telemetry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drone_telemetry_order_by!]

    """filter the rows returned"""
    where: drone_telemetry_bool_exp
  ): [drone_telemetry!]!

  """
  fetch aggregated fields from the table: "drone_telemetry"
  """
  drone_telemetry_aggregate(
    """distinct select on columns"""
    distinct_on: [drone_telemetry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drone_telemetry_order_by!]

    """filter the rows returned"""
    where: drone_telemetry_bool_exp
  ): drone_telemetry_aggregate!

  """fetch data from the table: "drone_telemetry" using primary key columns"""
  drone_telemetry_by_pk(id: bigint!): drone_telemetry

  """
  fetch data from the table in a streaming manner: "drone_telemetry"
  """
  drone_telemetry_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [drone_telemetry_stream_cursor_input]!

    """filter the rows returned"""
    where: drone_telemetry_bool_exp
  ): [drone_telemetry!]!

  """
  fetch data from the table: "drones"
  """
  drones(
    """distinct select on columns"""
    distinct_on: [drones_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drones_order_by!]

    """filter the rows returned"""
    where: drones_bool_exp
  ): [drones!]!

  """
  fetch aggregated fields from the table: "drones"
  """
  drones_aggregate(
    """distinct select on columns"""
    distinct_on: [drones_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drones_order_by!]

    """filter the rows returned"""
    where: drones_bool_exp
  ): drones_aggregate!

  """fetch data from the table: "drones" using primary key columns"""
  drones_by_pk(drone_id: bigint!): drones

  """
  fetch data from the table in a streaming manner: "drones"
  """
  drones_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [drones_stream_cursor_input]!

    """filter the rows returned"""
    where: drones_bool_exp
  ): [drones!]!

  """
  fetch data from the table: "flights"
  """
  flights(
    """distinct select on columns"""
    distinct_on: [flights_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flights_order_by!]

    """filter the rows returned"""
    where: flights_bool_exp
  ): [flights!]!

  """
  fetch aggregated fields from the table: "flights"
  """
  flights_aggregate(
    """distinct select on columns"""
    distinct_on: [flights_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flights_order_by!]

    """filter the rows returned"""
    where: flights_bool_exp
  ): flights_aggregate!

  """fetch data from the table: "flights" using primary key columns"""
  flights_by_pk(flight_id: bigint!): flights

  """
  fetch data from the table in a streaming manner: "flights"
  """
  flights_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [flights_stream_cursor_input]!

    """filter the rows returned"""
    where: flights_bool_exp
  ): [flights!]!

  """
  fetch data from the table: "orders"
  """
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """
  fetch aggregated fields from the table: "orders"
  """
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(order_id: bigint!): orders

  """
  fetch data from the table in a streaming manner: "orders"
  """
  orders_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [orders_stream_cursor_input]!

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!
}